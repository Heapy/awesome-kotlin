/*
 * This file is generated by jOOQ.
 */
package link.kotlin.server.jooq.main.tables.records


import link.kotlin.server.jooq.main.tables.Kotliner

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KotlinerRecord() : UpdatableRecordImpl<KotlinerRecord>(Kotliner.KOTLINER), Record10<Long?, String?, String?, String?, String?, String?, String?, String?, String?, String?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var avatar: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var normalizedEmail: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    var originalEmail: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    var firstName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    var lastName: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    var nickname: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    var password: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    var totp: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Long?, String?, String?, String?, String?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row10<Long?, String?, String?, String?, String?, String?, String?, String?, String?, String?>
    override fun valuesRow(): Row10<Long?, String?, String?, String?, String?, String?, String?, String?, String?, String?> = super.valuesRow() as Row10<Long?, String?, String?, String?, String?, String?, String?, String?, String?, String?>
    override fun field1(): Field<Long?> = Kotliner.KOTLINER.ID
    override fun field2(): Field<String?> = Kotliner.KOTLINER.AVATAR
    override fun field3(): Field<String?> = Kotliner.KOTLINER.DESCRIPTION
    override fun field4(): Field<String?> = Kotliner.KOTLINER.NORMALIZED_EMAIL
    override fun field5(): Field<String?> = Kotliner.KOTLINER.ORIGINAL_EMAIL
    override fun field6(): Field<String?> = Kotliner.KOTLINER.FIRST_NAME
    override fun field7(): Field<String?> = Kotliner.KOTLINER.LAST_NAME
    override fun field8(): Field<String?> = Kotliner.KOTLINER.NICKNAME
    override fun field9(): Field<String?> = Kotliner.KOTLINER.PASSWORD
    override fun field10(): Field<String?> = Kotliner.KOTLINER.TOTP
    override fun component1(): Long? = id
    override fun component2(): String? = avatar
    override fun component3(): String? = description
    override fun component4(): String? = normalizedEmail
    override fun component5(): String? = originalEmail
    override fun component6(): String? = firstName
    override fun component7(): String? = lastName
    override fun component8(): String? = nickname
    override fun component9(): String? = password
    override fun component10(): String? = totp
    override fun value1(): Long? = id
    override fun value2(): String? = avatar
    override fun value3(): String? = description
    override fun value4(): String? = normalizedEmail
    override fun value5(): String? = originalEmail
    override fun value6(): String? = firstName
    override fun value7(): String? = lastName
    override fun value8(): String? = nickname
    override fun value9(): String? = password
    override fun value10(): String? = totp

    override fun value1(value: Long?): KotlinerRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): KotlinerRecord {
        this.avatar = value
        return this
    }

    override fun value3(value: String?): KotlinerRecord {
        this.description = value
        return this
    }

    override fun value4(value: String?): KotlinerRecord {
        this.normalizedEmail = value
        return this
    }

    override fun value5(value: String?): KotlinerRecord {
        this.originalEmail = value
        return this
    }

    override fun value6(value: String?): KotlinerRecord {
        this.firstName = value
        return this
    }

    override fun value7(value: String?): KotlinerRecord {
        this.lastName = value
        return this
    }

    override fun value8(value: String?): KotlinerRecord {
        this.nickname = value
        return this
    }

    override fun value9(value: String?): KotlinerRecord {
        this.password = value
        return this
    }

    override fun value10(value: String?): KotlinerRecord {
        this.totp = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: String?, value5: String?, value6: String?, value7: String?, value8: String?, value9: String?, value10: String?): KotlinerRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised KotlinerRecord
     */
    constructor(id: Long? = null, avatar: String? = null, description: String? = null, normalizedEmail: String? = null, originalEmail: String? = null, firstName: String? = null, lastName: String? = null, nickname: String? = null, password: String? = null, totp: String? = null): this() {
        this.id = id
        this.avatar = avatar
        this.description = description
        this.normalizedEmail = normalizedEmail
        this.originalEmail = originalEmail
        this.firstName = firstName
        this.lastName = lastName
        this.nickname = nickname
        this.password = password
        this.totp = totp
    }

    /**
     * Create a detached, initialised KotlinerRecord
     */
    constructor(value: link.kotlin.server.jooq.main.tables.pojos.Kotliner?): this() {
        if (value != null) {
            this.id = value.id
            this.avatar = value.avatar
            this.description = value.description
            this.normalizedEmail = value.normalizedEmail
            this.originalEmail = value.originalEmail
            this.firstName = value.firstName
            this.lastName = value.lastName
            this.nickname = value.nickname
            this.password = value.password
            this.totp = value.totp
        }
    }
}
