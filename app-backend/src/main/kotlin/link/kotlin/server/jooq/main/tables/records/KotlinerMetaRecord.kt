/*
 * This file is generated by jOOQ.
 */
package link.kotlin.server.jooq.main.tables.records


import link.kotlin.server.jooq.main.tables.KotlinerMeta

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KotlinerMetaRecord() : UpdatableRecordImpl<KotlinerMetaRecord>(KotlinerMeta.KOTLINER_META), Record4<Long?, Long?, String?, String?> {

    var kotlinerId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var id: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var metaKey: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var metaValue: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Long?, Long?, String?, String?> = super.fieldsRow() as Row4<Long?, Long?, String?, String?>
    override fun valuesRow(): Row4<Long?, Long?, String?, String?> = super.valuesRow() as Row4<Long?, Long?, String?, String?>
    override fun field1(): Field<Long?> = KotlinerMeta.KOTLINER_META.KOTLINER_ID
    override fun field2(): Field<Long?> = KotlinerMeta.KOTLINER_META.ID
    override fun field3(): Field<String?> = KotlinerMeta.KOTLINER_META.META_KEY
    override fun field4(): Field<String?> = KotlinerMeta.KOTLINER_META.META_VALUE
    override fun component1(): Long? = kotlinerId
    override fun component2(): Long? = id
    override fun component3(): String? = metaKey
    override fun component4(): String? = metaValue
    override fun value1(): Long? = kotlinerId
    override fun value2(): Long? = id
    override fun value3(): String? = metaKey
    override fun value4(): String? = metaValue

    override fun value1(value: Long?): KotlinerMetaRecord {
        this.kotlinerId = value
        return this
    }

    override fun value2(value: Long?): KotlinerMetaRecord {
        this.id = value
        return this
    }

    override fun value3(value: String?): KotlinerMetaRecord {
        this.metaKey = value
        return this
    }

    override fun value4(value: String?): KotlinerMetaRecord {
        this.metaValue = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: String?): KotlinerMetaRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised KotlinerMetaRecord
     */
    constructor(kotlinerId: Long? = null, id: Long? = null, metaKey: String? = null, metaValue: String? = null): this() {
        this.kotlinerId = kotlinerId
        this.id = id
        this.metaKey = metaKey
        this.metaValue = metaValue
    }

    /**
     * Create a detached, initialised KotlinerMetaRecord
     */
    constructor(value: link.kotlin.server.jooq.main.tables.pojos.KotlinerMeta?): this() {
        if (value != null) {
            this.kotlinerId = value.kotlinerId
            this.id = value.id
            this.metaKey = value.metaKey
            this.metaValue = value.metaValue
        }
    }
}
